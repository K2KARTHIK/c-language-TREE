// duplicates_bst
#include <stdio.h>
#include <stdlib.h>

// Structure for a binary search tree node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the binary search tree
struct Node* insertNode(struct Node* root, int data) {
    if (root == NULL) {
        root = createNode(data);
    } else if (data < root->data) {
        root->left = insertNode(root->left, data);
    } else if (data > root->data) {
        root->right = insertNode(root->right, data);
    }
    return root;
}

// Function to check for duplicate values in a binary search tree
void findDuplicates(struct Node* root) {
    static struct Node* prev = NULL;
    if (root == NULL) {
        return;
    }

    findDuplicates(root->left);

    if (prev != NULL && root->data == prev->data) {
        printf("Duplicate value found: %d\n", root->data);
    }

    prev = root;

    findDuplicates(root->right);
}

int main() {
    struct Node* root = NULL;
    int n, data;

    printf("Enter the number of elements in the binary search tree: ");
    scanf("%d", &n);

    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        root = insertNode(root, data);
    }

    printf("Duplicate values in the binary search tree:\n");
    findDuplicates(root);

    return 0;
}
